import { TextMateParse } from '@idl/tests/helpers';

describe(`[auto generated] Validates case statement`, () => {
  it(`[auto generated] parses case loop with many syntaxes`, async () => {
    // test code to extract tokens from
    const code = [
      `CASE x OF`,
      `   ; something cool`,
      `1 $`,
      `  : $`,
      `   PRINT, 'one' + func()`,
      `ELSE: BEGIN`,
      `   dat = {myStruct}`,
      `   PRINT, 'Please enter a value between 1 and 4'`,
      `   END`,
      `ENDCASE`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'CASE',
        startIndex: 0,
        endIndex: 4,
        scopes: ['source.idl', 'group.logic.case.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: 'x',
        startIndex: 5,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: 'OF',
        startIndex: 7,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: '; ',
        startIndex: 3,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'comment.line.idl',
        ],
      },
      {
        line: 1,
        match: 'something cool',
        startIndex: 5,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'comment.line.idl',
        ],
      },
      {
        line: 2,
        match: '1',
        startIndex: 0,
        endIndex: 1,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 2,
        match: '$',
        startIndex: 2,
        endIndex: 3,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 3,
        match: ':',
        startIndex: 2,
        endIndex: 3,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: '$',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 4,
        match: 'PRINT',
        startIndex: 3,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 4,
        match: ',',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 4,
        match: "'",
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 4,
        match: 'one',
        startIndex: 11,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 4,
        match: "'",
        startIndex: 14,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 4,
        match: '+',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 4,
        match: 'func',
        startIndex: 18,
        endIndex: 22,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 4,
        match: '(',
        startIndex: 22,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 4,
        match: ')',
        startIndex: 23,
        endIndex: 24,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 5,
        match: 'ELSE:',
        startIndex: 0,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 5,
        match: ' BEGIN',
        startIndex: 5,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 6,
        match: 'dat',
        startIndex: 3,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 6,
        match: '=',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 6,
        match: '{',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'group.structure.idl',
          'meta.brace.idl',
        ],
      },
      {
        line: 6,
        match: 'myStruct',
        startIndex: 10,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'group.structure.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 6,
        match: '}',
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'group.structure.idl',
          'meta.brace.idl',
        ],
      },
      {
        line: 7,
        match: 'PRINT',
        startIndex: 3,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 7,
        match: ',',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 7,
        match: "'",
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 7,
        match: 'Please enter a value between 1 and 4',
        startIndex: 11,
        endIndex: 47,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 7,
        match: "'",
        startIndex: 47,
        endIndex: 48,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 8,
        match: '   END',
        startIndex: 0,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 9,
        match: 'ENDCASE',
        startIndex: 0,
        endIndex: 7,
        scopes: ['source.idl', 'group.logic.case.idl', 'keyword.control.idl'],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] nested case statement`, async () => {
    // test code to extract tokens from
    const code = [
      `CASE x OF`,
      `1: PRINT, 'one'`,
      `ELSE: BEGIN`,
      `  CASE x OF`,
      `    2: PRINT, 'two'`,
      `    ELSE: BEGIN`,
      `    END`,
      `  ENDCASE`,
      `END`,
      `ENDCASE`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'CASE',
        startIndex: 0,
        endIndex: 4,
        scopes: ['source.idl', 'group.logic.case.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: 'x',
        startIndex: 5,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: 'OF',
        startIndex: 7,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: '1',
        startIndex: 0,
        endIndex: 1,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 1,
        match: ':',
        startIndex: 1,
        endIndex: 2,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: 'PRINT',
        startIndex: 3,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: "'",
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 1,
        match: 'one',
        startIndex: 11,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 1,
        match: "'",
        startIndex: 14,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: 'ELSE:',
        startIndex: 0,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 2,
        match: ' BEGIN',
        startIndex: 5,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: '  CASE',
        startIndex: 0,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: 'x',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 3,
        match: 'OF',
        startIndex: 9,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 4,
        match: '2',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 4,
        match: ':',
        startIndex: 5,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 4,
        match: 'PRINT',
        startIndex: 7,
        endIndex: 12,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 4,
        match: ',',
        startIndex: 12,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 4,
        match: "'",
        startIndex: 14,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 4,
        match: 'two',
        startIndex: 15,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 4,
        match: "'",
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 5,
        match: '    ELSE:',
        startIndex: 0,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 5,
        match: ' BEGIN',
        startIndex: 9,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 6,
        match: '    END',
        startIndex: 0,
        endIndex: 7,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 7,
        match: 'ENDCASE',
        startIndex: 2,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.case.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 8,
        match: 'END',
        startIndex: 0,
        endIndex: 3,
        scopes: [
          'source.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 9,
        match: 'ENDCASE',
        startIndex: 0,
        endIndex: 7,
        scopes: ['source.idl', 'group.logic.case.idl', 'keyword.control.idl'],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] methods in case logic`, async () => {
    // test code to extract tokens from
    const code = [
      `;+`,
      `; :Returns: Long`,
      `;`,
      `;-`,
      `function Class::Test`,
      `  compile_opt idl2`,
      ``,
      `  case (!true) of`,
      `    self.segnames.pix_latlon: (*self.scan_info_ptr).SetProperty, geo_file = outname`,
      `    self.segnames.pix_latlon: (*self.scan_info_ptr).SetProperty(eo_file = outname)`,
      `    else:`,
      `  endcase`,
      ``,
      `  return, 1`,
      `end`,
      ``,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: ';+',
        startIndex: 0,
        endIndex: 3,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 1,
        match: '; :',
        startIndex: 0,
        endIndex: 3,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 1,
        match: 'Returns',
        startIndex: 3,
        endIndex: 10,
        scopes: [
          'source.idl',
          'comment.block.idl',
          'comment.line.idl',
          'markup.heading.idl',
        ],
      },
      {
        line: 1,
        match: ':',
        startIndex: 10,
        endIndex: 11,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 1,
        match: ' Long',
        startIndex: 11,
        endIndex: 16,
        scopes: [
          'source.idl',
          'comment.block.idl',
          'comment.line.idl',
          'entity.name.type.ts',
        ],
      },
      {
        line: 2,
        match: ';',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 3,
        match: ';',
        startIndex: 0,
        endIndex: 1,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 3,
        match: '-',
        startIndex: 1,
        endIndex: 2,
        scopes: ['source.idl', 'comment.block.idl', 'comment.line.idl'],
      },
      {
        line: 4,
        match: 'function',
        startIndex: 0,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 4,
        match: 'Class::Test',
        startIndex: 9,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.routine.name.idl',
          'entity.name.function.idl-method',
        ],
      },
      {
        line: 5,
        match: '  compile_opt',
        startIndex: 0,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.control.compound.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 5,
        match: 'idl2',
        startIndex: 14,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.control.compound.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 7,
        match: '  case',
        startIndex: 0,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 7,
        match: '(',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 7,
        match: '!true',
        startIndex: 8,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.brackets.paren.idl',
          'constant.language.idl',
        ],
      },
      {
        line: 7,
        match: ')',
        startIndex: 13,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 7,
        match: 'of',
        startIndex: 15,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 8,
        match: 'self',
        startIndex: 4,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 8,
        match: '.',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
        ],
      },
      {
        line: 8,
        match: 'segnames',
        startIndex: 9,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 8,
        match: '.',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
        ],
      },
      {
        line: 8,
        match: 'pix_latlon',
        startIndex: 18,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 8,
        match: ':',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 8,
        match: '(',
        startIndex: 30,
        endIndex: 31,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 8,
        match: '*',
        startIndex: 31,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 8,
        match: 'self',
        startIndex: 32,
        endIndex: 36,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 8,
        match: '.',
        startIndex: 36,
        endIndex: 37,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
        ],
      },
      {
        line: 8,
        match: 'scan_info_ptr',
        startIndex: 37,
        endIndex: 50,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 8,
        match: ')',
        startIndex: 50,
        endIndex: 51,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 8,
        match: '.',
        startIndex: 51,
        endIndex: 52,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 8,
        match: 'SetProperty',
        startIndex: 52,
        endIndex: 63,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'support.function.idl-procedure-method',
        ],
      },
      {
        line: 8,
        match: ',',
        startIndex: 63,
        endIndex: 64,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 8,
        match: 'geo_file',
        startIndex: 65,
        endIndex: 73,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'parameter.usage.keyword.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 8,
        match: ' =',
        startIndex: 73,
        endIndex: 75,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'parameter.usage.keyword.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 8,
        match: 'outname',
        startIndex: 76,
        endIndex: 83,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.pro-method.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 9,
        match: 'self',
        startIndex: 4,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 9,
        match: '.',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
        ],
      },
      {
        line: 9,
        match: 'segnames',
        startIndex: 9,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 9,
        match: '.',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
        ],
      },
      {
        line: 9,
        match: 'pix_latlon',
        startIndex: 18,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 9,
        match: ':',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 9,
        match: '(',
        startIndex: 30,
        endIndex: 31,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 9,
        match: '*',
        startIndex: 31,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 9,
        match: 'self',
        startIndex: 32,
        endIndex: 36,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.name.type.idl',
        ],
      },
      {
        line: 9,
        match: '.',
        startIndex: 36,
        endIndex: 37,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
        ],
      },
      {
        line: 9,
        match: 'scan_info_ptr',
        startIndex: 37,
        endIndex: 50,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 9,
        match: ')',
        startIndex: 50,
        endIndex: 51,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 9,
        match: '.',
        startIndex: 51,
        endIndex: 52,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 9,
        match: 'SetProperty',
        startIndex: 52,
        endIndex: 63,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'entity.name.function.idl-method.idl',
        ],
      },
      {
        line: 9,
        match: '(',
        startIndex: 63,
        endIndex: 64,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 9,
        match: 'eo_file',
        startIndex: 64,
        endIndex: 71,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'parameter.usage.keyword.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 9,
        match: ' =',
        startIndex: 71,
        endIndex: 73,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'parameter.usage.keyword.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 9,
        match: 'outname',
        startIndex: 74,
        endIndex: 81,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 9,
        match: ')',
        startIndex: 81,
        endIndex: 82,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 10,
        match: '    else:',
        startIndex: 0,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'group.logic.of.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 11,
        match: 'endcase',
        startIndex: 2,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.logic.case.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 13,
        match: 'return',
        startIndex: 2,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 13,
        match: ',',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 13,
        match: '1',
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'group.call.pro.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 14,
        match: 'end',
        startIndex: 0,
        endIndex: 3,
        scopes: [
          'source.idl',
          'group.routine.definition.idl',
          'keyword.control.idl',
        ],
      },
    ];
    expect(expected).toEqual(tokenized);
  });
});
