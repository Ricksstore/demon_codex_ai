{
  "version": "2.0.0",
  "cells": [
    {
      "type": "markdown",
      "content": [
        "# Conditional Expressions in IDL",
        "___"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "**Conditional logic** allows programs to make decisions based on true/false conditions.  ",
        "This is done through the use of **conditional expressions** such as:",
        "- [`if`](#if-statements)",
        "- [`else`](#else-if)",
        "- [`case`](#case-statements)",
        "- [`switch`](#switch-statements)",
        "---"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "## **First lets talk structure.**  ",
        "**Conditional Expressions** allow for the execution of a **block of code** if a condition is met.  ",
        "",
        "A **condition** is a expression that evaluates to **true** or **false** to be used in deciding what do do next."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "## **If Statements**"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The conditional expression `if`, also known as a **if-then statement**, is a useful and simple construct.  ",
        "",
        "The `if` statement takes the value of a [**truth statement** ](02-Operators.idlnb), and if that statement evaluates to **true(1)** it executes the code in the **block**.  ",
        "",
        "For example:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; !True or 1 will always evaluate to \"true\"",
        "if (!True) then print, `Defining \"Block\" on the same line`",
        "",
        "if (1) then begin",
        "  print, `Defining \"Block\" on separate lines.`",
        "  print, `This allows for multiple lines of code.`",
        "endif",
        "",
        "; !False or 0 will always evaluate to \"false\"",
        "if (!false) then begin",
        "  print, `This will not print.`",
        "endif"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Why don't you try it out?"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "var1 = 10",
        "var2 = 10",
        "; Make an `if` statement that prints a message if two values are equal to each other."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "<details>",
        "  <summary>Click to reveal the answer to suggestion</summary>",
        "",
        "  **Answer**:  ",
        "  ```idl",
        "var1 = 10",
        "var2 = 10",
        "",
        "if var1 eq var2 then begin",
        "    print, `var1 and var2 are equal. ${var1} = ${var2}`",
        "endif",
        "  ```",
        "</details>  ",
        "",
        "---"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "## **Else Statements**"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The conditional expression `Else` also known as the **else** in an **if-then-else statement**, is a generalization of the `if-then` conditional.",
        "",
        "The `else` executes its **block** of code if the `if statement` it is attached to does not.",
        "",
        "For example:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "if (!false) then begin",
        "  print, `This block will not execute.`",
        "endif else begin",
        "  print, `Because the block in the if statement does not then this one will.`",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "These can be chained together into a chain of `else if` statements.",
        "",
        "#### **Else If**",
        "`Else if` is used to check multiple conditions **sequentially**. This means that as soon as one `if` **condition** is satisfied, IDL executes that block of code and ignores the rest of the `if` statements.",
        "",
        ">Each `else if` should be preceeded by an `endif` and followed by another `endif` at the end of the code block. If you have a final `else` block then that should be followed by an `endelse`.",
        "",
        "For example:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "number = 10",
        "if (number lt 5) then begin",
        "    print, `This block will not execute because the condition is False`",
        "endif else if (number lt 20) then begin",
        "    print, `We print here!`",
        "endif else if (number lt 30) then begin",
        "    print, `This block will not execute because the above condition is true. Therefore, the sequence is \"broken\".`",
        "endif else begin",
        "    print, `Catch all.`",
        "endelse"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "___",
        "## **Case Statements**",
        "Case statements are technically a **control flow structure**. They are functionally a series of conditional expressions that allows you to execute different code blocks depending on the value of different **expressions**. Think of it like a organized `if else` statement."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; pick a number at random.",
        "seed = systime(/SECONDS)",
        "value = floor(randomu(seed) * 4)",
        "",
        "case value of",
        "    0: begin",
        "        print, 'case 1 selected'",
        "    end",
        "    1: begin",
        "        print, 'case 1 selected'",
        "    end",
        "    2: begin",
        "        print, 'case 2 selected'",
        "    end",
        "    3: begin",
        "        print, 'case 3 selected'",
        "    end",
        "    else: begin",
        "        print,'default case: value not recognized'",
        "    end",
        "endcase"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The `Case` statement, Like `If Else`, is **sequential**. Meaning once a matching condition is encountered, subsequent conditions are ignored.  ",
        "See **Example**:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "value = 1",
        "",
        "case value of",
        "    0: print, `condition not met, Won't print.`",
        "    1: print, 'First condition to be met, so this prints.'",
        "    2: print, 'CASE does not even check this.'",
        "    3: print, 'CASE does not even check this.'",
        "    else: begin",
        "        print, 'Default case: Value not recognized.'",
        "    end",
        "endcase"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "#### **Exercise 1**",
        "Convert the following `If-Else` into a `Case` Statement."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "value = 2 ",
        "",
        "if value eq 0 then begin",
        "    print, 'Value is zero'",
        "endif else if value eq 1 then begin",
        "    print, 'Value is one'",
        "endif else if value eq 2 then begin",
        "    print, 'Value is two'",
        "endif else begin",
        "    print, 'Value is something else'",
        "endelse"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "<details>",
        "  <summary>Click to reveal the answer</summary>",
        "",
        "  **Answer**: </br>",
        "```IDL",
        "case value of",
        "    0: print, 'Value is zero'    ; Executes if value = 0",
        "    1: print, 'Value is one'     ; Executes if value = 1",
        "    2: print, 'Value is two'     ; Executes if value = 2",
        "    else: begin",
        "        print, 'Value is something else'  ; Executes if none of the above match",
        "    end",
        "endcase",
        "```",
        "",
        "</details>  "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Case Statements can also be used to evaluate **conditional expressions** instead of just matching exact values. ",
        " ",
        "For **example**:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "grade = 85",
        "",
        "case !true of  ; The !true here makes it so the block executes the first expression that evaluates to true.",
        "    grade ge 90: print, 'Letter Grade: A'",
        "    grade ge 80: print, 'Letter Grade: B'",
        "    grade ge 70: print, 'Letter Grade: C'",
        "    grade ge 60: print, 'Letter Grade: D'",
        "    else: begin",
        "        print, 'Letter Grade: F'",
        "    end",
        "endcase"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "___",
        "## **Switch Statements**",
        "`Switch` statements are extremely similar to `Case` statements. Their only difference is that `switch` statements **fall through**. Meaning, they execute the first matching statement and **all following statements unless a `break` is met**.  ",
        "",
        "For **example**, if we take the same example for `case` and make it a switch:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "value = 1",
        "",
        "switch value of",
        "    0: print, `condition not met, won't print.`",
        "    1: print, 'First condition to be met, so this prints.'",
        "    100: begin ",
        "        print, `Even though this condition is not met, it comes after` $",
        "        + ` a statement where the condition is. Therefore, we print.`",
        "    end",
        "    else: begin",
        "        print, 'Default case: Oh no, even the else gets triggered.'",
        "    end",
        "endswitch"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "This can be controlled through the use of a `break` statement.",
        "",
        "See **example**:"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "value = 1",
        "",
        "switch value of",
        "    0: begin",
        "        print, `condition not met, won't print.`",
        "        break",
        "    end",
        "    1: begin",
        "        print, 'First condition to be met, so this prints.'",
        "        break",
        "    end",
        "    2: print, 'This will not print because of the break.'",
        "    else: begin",
        "        print, 'Default case: because of the break we dont get here.'",
        "    end",
        "endswitch"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "#### **Exercise 1**",
        "Convert the following `Case` into a `Switch` Statement."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; pick a number at random.",
        "seed = systime(/SECONDS)",
        "value = floor(randomu(seed) * 4)",
        "",
        "case value of",
        "    0: begin",
        "        print, `First code block.`",
        "    end",
        "    1: begin",
        "        print, `Second code block.`",
        "    end",
        "    2: begin",
        "        print, `Third code block.`",
        "    end",
        "    else: begin",
        "        print, 'Default code block.'",
        "    end",
        "endcase"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";Code here!"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "<details>",
        "  <summary>Click to reveal the answer</summary>",
        "",
        "  **Answer**: </br>",
        "```IDL",
        "switch value of",
        "    0: begin",
        "        print, `Fist code block.`",
        "        break",
        "    end",
        "    1: begin",
        "        print, `Second code block.`",
        "        break",
        "    end",
        "    2: begin",
        "        print, `Third code block.`",
        "        break",
        "    end",
        "    else: begin",
        "        print, `Default code block.`",
        "        break",
        "    end",
        "endswitch",
        "```",
        "",
        "</details>  "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "___",
        "### Keep it up!"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "cli_progress.update, 54, Text = \"conditional expressions are necessary for complicated programs. Next we will cover Loops.\""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "What if we want to do the same Expression repeatedly? [Loops](./07-Loops.idlnb)!"
      ],
      "metadata": {},
      "outputs": []
    }
  ]
}